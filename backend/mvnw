#!/bin/sh
# ----------------------------------------------------------------------------
# Licenciado para a Apache Software Foundation (ASF) sob um ou mais acordos de contribuição.
# Veja o arquivo NOTICE distribuído com este trabalho para obter informações adicionais sobre a titularidade de direitos autorais.
# A ASF licencia este arquivo sob a Licença Apache, Versão 2.0 (a "Licença");
# Você não pode usar este arquivo exceto em conformidade com a Licença.
# Você pode obter uma cópia da Licença em:
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# A menos que exigido pela legislação aplicável ou acordado por escrito, o software distribuído sob a Licença é distribuído
# "COMO ESTÁ", SEM GARANTIAS OU CONDIÇÕES DE QUALQUER TIPO, expressas ou implícitas.
# Veja a Licença para a linguagem específica que rege permissões e limitações sob a Licença.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Script de inicialização do Apache Maven Wrapper, versão 3.3.2
#
# Variáveis de ambiente opcionais
# -------------------------------
#   JAVA_HOME - local do diretório raiz do JDK, necessário ao baixar o Maven via fonte Java
#   MVNW_REPOURL - URL base do repositório para baixar a distribuição do Maven
#   MVNW_USERNAME/MVNW_PASSWORD - usuário e senha para baixar o Maven
#   MVNW_VERBOSE - true: habilita log detalhado; debug: rastreia o script mvnw; outros: silencia a saída
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# Suporte específico do sistema operacional.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# Define JAVACMD e JAVACCMD
set_java_home() {
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # O JDK da IBM no AIX usa localizações estranhas para os executáveis
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "A variável de ambiente JAVA_HOME não está definida corretamente, portanto mvnw não pode ser executado." >&2
        echo "JAVA_HOME está definido como \"$JAVA_HOME\", mas \"\$JAVA_HOME/bin/java\" ou \"\$JAVA_HOME/bin/javac\" não existe." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(command -v java)" || :
    JAVACCMD="$(command -v javac)" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "O comando java/javac não existe no PATH nem JAVA_HOME está definido, portanto mvnw não pode ser executado." >&2
      return 1
    fi
  fi
}

# Gera um hash como em Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # Remove espaços em branco no início/fim, retornos de carro, tabulações e quebras de linha.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# Lê distributionUrl e distributionSha256Sum do arquivo .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "não foi possível ler a propriedade distributionUrl em ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

# Detecta a plataforma e define variáveis conforme necessário
case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *) echo "Não foi possível detectar a plataforma nativa para mvnd em $(uname)-$(uname -m), usando versão Java pura" >&2
     distributionPlatform=linux-amd64 ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# Aplica o MVNW_REPOURL (caso definido) e define o diretório do Maven
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "não foi possível executar $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "MAVEN_HOME existente encontrado em $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl inválido, deve terminar com *-bin.zip ou maven-mvnd-*.zip, mas encontrado: '${distributionUrl-}'" ;;
esac

# Prepara diretório temporário
if TMP_DOWNLOAD_
