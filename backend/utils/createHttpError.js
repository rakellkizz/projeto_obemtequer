// -----------------------------------------------------------------------------
// ARQUIVO: utils/createHttpError.js
// -----------------------------------------------------------------------------
// üîß OBJETIVO:
// Fornece uma classe personalizada para erros HTTP (HttpError)
// e uma fun√ß√£o utilit√°ria para criar inst√¢ncias padronizadas,
// facilitando o tratamento uniforme de exce√ß√µes na aplica√ß√£o.
//
// üí° EXEMPLO DE USO:
// if (!usuario) throw createHttpError(404, 'Usu√°rio n√£o encontrado');
//
// -----------------------------------------------------------------------------


/**
 * üì¶ Classe personalizada para representar erros HTTP.
 * Estende a classe nativa Error, adicionando o statusCode HTTP
 * e um rastreamento de stack mais limpo.
 */
class HttpError extends Error {
  /**
   * @param {number} statusCode - C√≥digo de status HTTP (ex: 400, 404, 500).
   * @param {string} message - Mensagem explicativa do erro.
   */
  constructor(statusCode, message) {
    super(message);                    // üß¨ Inicializa a mensagem na superclasse
    this.name = 'HttpError';          // üìõ Nome da classe (√∫til para logs e rastreamento)
    this.statusCode = statusCode;     // üî¢ C√≥digo de status HTTP
    Error.captureStackTrace(this, this.constructor); // üîç Stack trace limpa
  }
}


/**
 * üß∞ Fun√ß√£o utilit√°ria para criar inst√¢ncias de HttpError.
 *
 * Abstrai a cria√ß√£o manual e mant√©m a padroniza√ß√£o em toda a aplica√ß√£o.
 *
 * @param {number} statusCode - C√≥digo HTTP (ex: 401, 403, 500).
 * @param {string} message - Mensagem descritiva do erro.
 * @returns {HttpError} - Inst√¢ncia de erro pronta para ser lan√ßada.
 */
const createHttpError = (statusCode, message) => {
  return new HttpError(statusCode, message);
};


// -----------------------------------------------------------------------------
// EXPORTA√á√ÉO
// -----------------------------------------------------------------------------
module.exports = createHttpError;
