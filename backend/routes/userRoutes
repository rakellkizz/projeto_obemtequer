// ------------------------------
// ARQUIVO: userRoutes.js
// ------------------------------
// Define as rotas de autenticação e registro de usuários.

const express = require('express');
const router = express.Router();
const { check, validationResult } = require('express-validator'); // Validações
const bcrypt = require('bcryptjs'); // Para criptografar a senha
const jwt = require('jsonwebtoken'); // Para gerar o token de autenticação
const User = require('../models/User'); // Modelo do usuário
require('dotenv').config(); // Para acessar variáveis como JWT_SECRET

// ------------------------------
// ROTA: POST /api/usuarios/registro
// Descrição: Cria um novo usuário com nome, email e senha
// ------------------------------
router.post('/registro', [
  check('nome', 'O nome é obrigatório').not().isEmpty(),
  check('email', 'Email inválido').isEmail(),
  check('senha', 'A senha deve ter no mínimo 6 caracteres').isLength({ min: 6 })
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ erros: errors.array() });
  }

  const { nome, email, senha } = req.body;

  try {
    // Verifica se já existe um usuário com esse email
    let usuarioExistente = await User.findOne({ email });
    if (usuarioExistente) {
      return res.status(400).json({ erro: 'Já existe um usuário com este e-mail.' });
    }

    // Cria nova instância de usuário
    const novoUsuario = new User({
      nome,
      email,
      senha
    });

    // Criptografa a senha antes de salvar
    const salt = await bcrypt.genSalt(10);
    novoUsuario.senha = await bcrypt.hash(senha, salt);

    // Salva o novo usuário no banco
    await novoUsuario.save();

    // Gera o token JWT
    const payload = { id: novoUsuario._id };
    const token = jwt.sign(payload, process.env.JWT_SECRET, {
      expiresIn: '7d' // Token válido por 7 dias
    });

    res.status(201).json({ mensagem: 'Usuário criado com sucesso!', token });

  } catch (err) {
    console.error(err.message);
    res.status(500).send('Erro no servidor');
  }
});

// ------------------------------
// ROTA: POST /api/usuarios/login
// Descrição: Autentica um usuário e retorna o token JWT
// ------------------------------
router.post('/login', [
  check('email', 'Email inválido').isEmail(),
  check('senha', 'A senha é obrigatória').exists()
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ erros: errors.array() });
  }

  const { email, senha } = req.body;

  try {
    // Verifica se o usuário existe
    const usuario = await User.findOne({ email });
    if (!usuario) {
      return res.status(400).json({ erro: 'Usuário não encontrado' });
    }

    // Compara a senha informada com a criptografada
    const senhaValida = await bcrypt.compare(senha, usuario.senha);
    if (!senhaValida) {
      return res.status(400).json({ erro: 'Senha incorreta' });
    }

    // Gera novo token JWT
    const payload = { id: usuario._id };
    const token = jwt.sign(payload, process.env.JWT_SECRET, {
      expiresIn: '7d'
    });

    res.status(200).json({ mensagem: 'Login realizado com sucesso!', token });

  } catch (err) {
    console.error(err.message);
    res.status(500).send('Erro no servidor');
  }
});

module.exports = router;
