// ------------------------------
// ARQUIVO: server.js
// ------------------------------
// Inicializa o servidor Express, conecta ao MongoDB e configura rotas b√°sicas.

// ------------------------------
// 1. IMPORTA√á√ÉO DE DEPEND√äNCIAS
// ------------------------------
require('dotenv').config();               // Carrega vari√°veis do .env
const express = require('express');       // Framework web
const mongoose = require('mongoose');     // ODM para MongoDB
const userRoutes = require('./backend/routes/userRoutes');        // Rotas de usu√°rio
const mensagemRoutes = require('./backend/routes/mensagemRoutes');// Rotas de mensagens

// ------------------------------
// 2. CONFIGURA√á√ïES INICIAIS
// ------------------------------
const app = express();                     // Cria app Express
const PORT = process.env.PORT || 5000;    // Porta padr√£o ou 5000
const MONGO_URI = process.env.MONGO_URI;  // URI do banco MongoDB

// ------------------------------
// 3. MIDDLEWARES GLOBAIS
// ------------------------------
app.use(express.json());                   // Permite receber JSON no corpo das requisi√ß√µes

// ------------------------------
// 4. ROTAS
// ------------------------------
app.use('/usuarios', userRoutes);          // Rotas de usu√°rios
app.use('/mensagens', mensagemRoutes);     // Rotas de mensagens

// ------------------------------
// 5. CONEX√ÉO COM O MONGODB E IN√çCIO DO SERVIDOR
// ------------------------------
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('‚úÖ Conex√£o com MongoDB estabelecida com sucesso');
  app.listen(PORT, () => {
    console.log(`üöÄ Servidor rodando na porta ${PORT}`);
  });
})
.catch((error) => {
  console.error('‚ùå Falha ao conectar ao MongoDB:', error.message);
  process.exit(1); // Encerra a aplica√ß√£o caso n√£o conecte ao banco
});
