// --------------------------------------------------------------------
// ARQUIVO: errorHandler.js
// DESCRIÃ‡ÃƒO: Middleware global para captura e tratamento de erros.
// Aplica boas prÃ¡ticas como logs, mensagens padronizadas e status HTTP.
// --------------------------------------------------------------------

/**
 * Middleware para tratamento de erros (Express padrÃ£o de 4 parÃ¢metros).
 * @param {Error} err - Objeto de erro lanÃ§ado
 * @param {Request} req - RequisiÃ§Ã£o HTTP
 * @param {Response} res - Resposta HTTP
 * @param {Function} next - PrÃ³ximo middleware (nÃ£o usado aqui)
 */
const errorHandler = (err, req, res, next) => {
  console.error('ðŸ”¥ Erro capturado pelo middleware global:', err);

  // Status HTTP: se nÃ£o estiver definido, assume 500 (erro interno)
  const statusCode = res.statusCode !== 200 ? res.statusCode : 500;

  res.status(statusCode).json({
    status: 'error',
    message: err.message || 'Erro interno no servidor',
    stack: process.env.NODE_ENV === 'production' ? undefined : err.stack,
  });
};

module.exports = errorHandler;
